'use strict'; // Дабы код работал в современном режиме (директива)


alert ('Press "OK"'); // выводит текст на экран в виде модального окна

let message; // переменная и название переменной, однострочная функция
message = 'Example'; // можно поместить данные с помощью оператора присваивания "=" 

alert (message); // вывод переменной

let alarm = 'text', // является строкой (string)
    alarm2 = 'text',
    alarm3 = 'text'; // способ еще более краткой функции

let $ = 1,
    _ = 2; // допустимые знаки для переменных

let APPLE = 1,
    apple = 2; // разные регистры = разные переменные

const simpleWords = 'Hello World!'; // константа (неизменяемые переменные)

const COLOR_ORANGE = 'FF7F00'; // константа в верхнем регистре может использоваться для трудных значений цвета, которые нужно запомнить и для других жестко закодированных значений

// Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.

// Infinity - представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа. Можно вывести с помощью деления на ноль

alert (1 / 0); // выводится Infinity

// NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции

alert ('не число' * 2); // выводится NaN
alert (NaN + 3); // возвращает NaN

// Если где-то в математическом выражении есть NaN, то оно распространяется на весь результат (есть только одно исключение: NaN ** 0 равно 1).

alert (NaN ** 0); // выводится 1

// Для работы с большими числами ±(253-1) потребуется значение типа bigInt

const bigInt = 1234567890123456789012345678901234567890n; // для его работы требуется поставить значение 'n' в конец произвольного числа

alert (`Меня зовут ${currentUserName}`); // выражение внутри ${} вычисляется или преобрзаует переменную, для этого string нужно поместить в обратные кавычки (`)


let ageChecked = false; // boolean в виде обозначения
let isGreater = 4 > 1; // boolean в виде задачи
alert (isGreater); // boolean тип, есть два значения true или false, в данном примере выводится значение true

let age = null; // значение null обозначает пустоту, значние неизвестно и пусто
alert (age); // выводится null


let userAge;
alert (userAge); // выводится undefined


let ageOfUser = prompt ('Сколько тебе лет?', [18]); // модальное окно с возможностью написания значения пользователем (сначала будет стоять автозаполнение значением в квадратных скобках, [значение внутри них необязательны])
alert (`Тебе ${ageOfUser} лет`) // выводится текст с указанным раньше числом

let ageIdentifire = confirm ('Тебе больше 18 лет?'); // выводится модальное окно с кнопками отмены и ОК. При отмене выводится результат false и наоборот.
alert (ageIdentifire); // выводится текст с ответами

// На все указанные методы распространяются два ограничения: Расположение окон определяется браузером. Обычно окна находятся в центре. Визуальное отображение окон зависит от браузера, и мы не можем изменить их вид.

// Строковое преобразование:

let value = true;
alert (typeof value); // выводится тип boolean
value = String(value); // boolean преобразуется в тип string
alert = (typeof value); // выводится тип string


// Правила Численного Преобразования:
    // undefined преобразуется в NaN;
    // null преобразуется в 0;
    // true/false преобразуется в 1/0;
    // string (пробелы (знаки табуляции \t и знаки новой строки \n и т.п.) обрезаются) Далее если пустая строка, выводится значение 0, либо считывается число, При ошибке (буквы или слова в значении) выводится NaN

alert ("6" / "2") // выводится 3, строки преобразуются в числа

let str = "777";
alert (typeof str); // выводится тип string
str = Number(str); // string преобразуется в тип number
alert (typeof str); // выводится тип number


// Если использовать любой символ в преобразовании, оно приведет к значению NaN, что означает, что преобразование не удалось выполнить

str = Number("Any letter");
alert (typeof str); // выводится NaN, преобразование не удалось



alert (Number ("   123   ")); // выводится 123, пробелы по краям обрезаются в типе number
alert (Number ("123z")); // выводится NaN, ошибка чтения числа на месте символа "z"
alert (Number (true)); // выводится 1
alert (Number (false)); // выводится 0

// Правило Логичного Преобразования в типе данных Boolean:
    // Пустые значения (пустая строка, NaN, undefined, 0 и null) выводятся как false;
    // Все остальные значение выводятся как true;

alert (Boolean (1)); // true
alert (Boolean (0)); // false
alert (Boolean ("Привет!")); // true
alert (Boolean ("")); // false
alert (Boolean (" ")) // true

// В других языках, например PHP, строку "0" воспринимают как false, но в JavaScript выводится значение true

alert (Boolean ("0")) // true



// Операнд - то, к чему применяется оператор. В уравнении 8 * 2, есть левый и правый операнд (8(л) и 2(п)), также их можно назвать аргументами.
// Унарный - оператор, который применяется к одному операнду
let x = 1;
x = -x;
alert (x); // выодится -1, применили унарный минус к одному операнду

// Бинарный это оператор, который применяется к двум операндам
let y = 2,
    c = 1;
alert (y - c); // выводится 1, бинарный минус вычитает значения


// Операторы которые стоит детально изучить:

// % - остаток от деления (не проценты)
alert (5 % 2); // выводится 1, остаток от деления 5 на 2

// ** возведение в степень
alert (2 ** 2); // выводится 8, операнд умножает себя 2 раза (2*2*2)

// Оператор работает не только для целых чисел

alert (4 ** (1/2)); // выводится 2, квадратный корень является возведением в степень 1/2

alert (8 ** (1/3)); // выводится 2, кубический корень является возведением в степень 1/3

